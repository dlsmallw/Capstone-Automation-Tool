import tkinter as tk
from tkinter import ttk
from components.TkText import FormattedText
class HomeFrame(ttk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        disclaimer_ft = self.build_disclaimer_panel(self)
        htu_frame = self.build_how_to_use_panel(self)
        disclaimer_ft.pack(pady=(75,0))
        htu_frame.pack()


    def build_disclaimer_panel(self, parent):
        ft = FormattedText(parent, width=600, borderwidth=2, relief='ridge')
        ft.add_title('DISCLAIMER')
        ft.add_paragraph("This tool has been developed to compile Taiga task data and GitHub commit data to generate reports. While efforts have been made to ensure the tool functions as intended, it is provided as is without any guarantees or warranties, express or implied.")
        ft.add_sub_header('User Responsibility', True)
        ft.add_paragraph("Users are solely responsible for reviewing, verifying, and validating the accuracy and completeness of the reports generated by this tool. The developer makes no representations regarding the reliability or suitability of the tool’s outputs for any particular use.")
        ft.add_sub_header('Liability', True)
        ft.add_paragraph("By using this tool, users acknowledge that the developer is not liable for any errors, omissions, misinterpretations, or consequences resulting from reliance on the tool’s outputs. The developer assumes no responsibility for any decisions, actions, or outcomes based on the use of this tool or the use of any reports generated by the tool.")
        ft.add_section_title("By continuing to use this tool, you agree to these terms.")
        return ft
    
    def build_how_to_use_panel(self, parent):
        def reports_panel(parent_frame):
            bullet_list = [
                "General/Master Taiga Data Reports: Effectively the same as what is within the Taiga tab",
                "General/Master GitHub Data Reports: Effectively the same as what is within the Git tab",
                "Work Summary Reports",
                "Individual Contribution Reports: This will generate a report in a similar format to the IC reports that are submitted every two weeks"
            ]

            ft = FormattedText(parent_frame, width=600)
            ft.add_paragraph("On the Reports tab, users can generate various reports based on the imported Taiga and Commit data:", False)
            ft.make_list(bullet_list)
            ft.add_paragraph("**Note: The Work Summary Reports and the Individual Contribution Reports do output the Task and Github link columns with actual hyperlinks. However, they are generated by inserting a formula into the spreadsheet, which is prohibited in the official report submissions. To get around this, you can take these columns of data, paste them into a word document and then copy them over to the work summary or IC template spreadsheets (and reformat the text/font to match typical hyperlink format).", False)
            return ft

        def git_panel(parent_frame):
            bullet_list = [
                "**Note: You will need to generate a token that will be used by the application to make GitHub API calls, this can be done on GitHub.",
                "The user will need to specify their GitHub username, the GitHub access token (classic token is what was used for testing), the repository owner's username, and the repositories name.",
                "Once all of this information is entered, the user can then import the commit data from this repository to display in the tab."
            ]

            ft = FormattedText(parent_frame, width=600)
            ft.add_paragraph("On the GitHub tab, users can import data by using the GitHub API:", False)
            ft.make_list(bullet_list)
            ft.add_paragraph("Once the data is imported the user can modify the data as they need to (disclaimer: The application isn't designed to handle non-typical data formats for these fields, so be careful about what is entered when editting the data). Be sure to hit the 'Save Current Table' button when you want to keep the current data, otherwise, you will lose any changes you have made.", False)
            return ft

        def taiga_panel(parent_frame):
            bullet_list = [
                "Importing by files ('From File' tab): After downloading the User Story and Task csv files from the 'Reports' page in the Taiga project's settings, the user can select the filepath to these two files and then import the Taiga data and display it in the tab.",
                "Importing by API ('From API' tab): The user can find the api urls for retrieving the User Story and Task csv data from the same 'Reports' page in the Taiga project settings. Then the user can enter these within the application and import the Taiga data and display it in the tab.",
                "**NOTE: You will need to coordinate with the Taiga project owner to request these items, since the settings page is only accessible by members with admin/owner privileges."
            ]

            ft = FormattedText(parent_frame, width=600)
            ft.add_paragraph("On the Taiga tab, users can import data by file or by using the Taiga api:", False)
            ft.make_list(bullet_list)
            ft.add_paragraph("Once the data is imported the user can modify the data as they need to (disclaimer: The application isn't designed to handle non-typical data formats for these fields, so be careful about what is entered when editting the data). Be sure to hit the 'Save Current Table' button when you want to keep the current data, otherwise, you will lose any changes you have made.", False)
            return ft

        how_to_use_frame = ttk.Frame(self, borderwidth=2, relief='ridge')
        how_to_use_lbl = ttk.Label(how_to_use_frame, text='How To Use', font=('Arial', 20, "bold"))
        tabControl = ttk.Notebook(how_to_use_frame)

        taiga_panel = taiga_panel(tabControl)
        git_panel = git_panel(tabControl)
        reports_panel = reports_panel(tabControl)

        tabControl.add(taiga_panel, text='Taiga Tab')
        tabControl.add(git_panel, text='GitHub Tab')
        tabControl.add(reports_panel, text='Reports Tab')
        how_to_use_lbl.pack()
        tabControl.pack(expand = 1, fill ="both") 

        return how_to_use_frame